---
title: ClamAV Add-on for PCF
owner: Security Engineering
---

<strong><%= modified_date %></strong>

This topic describes how to add ClamAV to your Pivotal Cloud Foundry (PCF) deployment.

<h2><a id="about-clamav"></a>About ClamAV Add-on for PCF</h2>

This add-on may be necessary for regulatory purposes if your compliance auditor requires antivirus protection within the PCF environment.

For example, auditors sometimes expect that antivirus protection is present in an environment that must comply with standards such as Payment Card Industry Data Security Standard (PCI DSS) or Health Insurance Portability and Accountability Act (HIPAA).

<h2><a id="prereqs"></a>Prerequisites</h2>

To install ClamAV Add-on, you need the following things:

* A PCF operator with admin rights. For more information, see [Understanding Pivotal Cloud Foundry User Types](https://docs.pivotal.io/pivotalcf/customizing/user-types.html#operator).

* Operations Manager (Ops Manager) v1.7 or later.

* At least 1 GB of memory free on each VM before deploying ClamAV Add-on. ClamAV Add-on uses 610 MB of memory. 

* A local mirror to get ClamAV virus updates. For instructions on how to set up a local mirror, see [Private Local Mirrors](https://www.clamav.net/documents/private-local-mirrors) in the ClamAV documentation.

* You must set up a local mirror to get ClamAV virus updates.
For instructions on how to set up a local mirror, see [Private Local Mirrors](https://www.clamav.net/documents/private-local-mirrors) in the ClamAV documentation.

<h2><a id="create-mfest"></a>Create the ClamAV Manifest</h2>

The ClamAV manifest is a YML file that contains runtime configuration information for ClamAV Add-on.
To create the ClamAV manifest for your deployment, follow the instructions below.

<h3>clamav.yml template for Linux</h3>

Create a file name <code>clamav.yml</code> using the following code as a template.

<pre class="terminal">
      releases:
      - name: clamav
        version: x.x.x
      addons:
      - name: clamav
        jobs:
        - name: clamav
          release: clamav
          properties:
            clamav:
              database_mirror: <%= vars.example_ip_1 %>
        include:
          stemcell:
          - os: ubuntu-trusty
    </pre>

<h3>clamav.yml template for Windows</h3>

Create a file name <code>clamav.yml</code> using the following code as a template.

<pre class="terminal">
      releases:
      - name: clamav
        version: x.x.x
      - name: clamav-lib
        version: x.x.x
        version: y.y.y
      addons:
      - name: clamav-windows
        jobs:
        - name: clamav-windows
          release: clamav
          properties:
            clamav:
              database_mirror: <%= vars.example_ip_1 %>
        - name: clamav-lib-windows
          release: clamav-lib
        include:
          stemcell:
          - os: windows2012R2
    </pre>

<h3>General clamav.yml template configuration</h3>

<ol>
<li>In the <code>database_mirror</code> field of the template, provide the hostname or IP address of a private ClamAV update mirror. Environments that cannot connect to the internet normally use an update mirror. If you do not specify a value, ClamAV defaults to an S3-based mirror for updates. For compliance reasons, only use the S3-based mirror in non-production environments.<br />

For how to set up a local mirror, see <a href="https://www.clamav.net/documents/private-local-mirrors">Private Local Mirrors</a> in the ClamAV documentation.</li>

<li>(Optional) If you have to use a proxy server to connect to the internet, do the following:
  <ul>
  <li>Add the <code>proxy_host</code> and <code>proxy_port</code> properties.</li>
  <li>If the proxy server needs authentication, add <code>proxy_user</code> and <code>proxy_password</code> properties.</li>
  </ul>
Replace the example text, indicated below in bold:  
  <pre class="terminal">
  releases:
  <span>-</span> name: clamav
      version: x.x.x
  addons:
    name: clamav
      jobs:
        <span>-</span> name: clamav
          release: clamav
      properties:
        clamav:
          on\_access: no
          scheduled: yes
          proxy\_host: <strong>PROXY.LOCALDOMAIN</strong>
          proxy\_port: <strong>3128</strong>
          proxy\_user: <strong>CLAMAV</strong>
          proxy\_password: <strong>SECRET</strong>
  ...
  </pre>
</li>
</ol>

<h2><a id="download-deploy"></a>Download and Deploy ClamAV Add-on</h2>
<ol>
<li>Download the ClamAV Add-on software binary from the <a href="https://network.pivotal.io/products/p-clamav-addon">Pivotal Network</a>.</li>
<li>Copy the software binary to your Ops Manager VM.
<pre class="terminal">scp -i PATH-TO-PRIVATE-KEY clamav-release.tar.gz ubuntu@YOUR-OPS-MANAGER-VM-IP:</pre></li>
<li>Copy the ClamAV manifest <code>clamav.yml</code> file to the Ops Manager VM.
<pre class="terminal">scp -i PATH-TO-PRIVATE-KEY clamav.yml ubuntu@YOUR-OPS-MANAGER-VM-IP:</pre></li>
<li>SSH into the Ops Manager VM.
<pre class="terminal">ssh -i PATH-TO-PRIVATE-KEY ubuntu@YOUR-OPS-MANAGER-VM-IP</pre></li>
<li>On the Ops Manager VM, navigate to the software binary location.
<pre class="terminal">cd PATH-TO-BINARY</pre></li>
<li>On the Ops Manager VM, target your BOSH Director instance.
<pre class="terminal">bosh target YOUR-OPS-MANAGER-DIRECTOR-IP<br/>
Target set to 'Ops Manager'<br/>
Your username: director<br/>
Enter password: ******************<br/>
Logged in as 'director'<br/>
</pre></li>
<li>Upload your release.
<pre class="terminal">bosh upload release PATH-TO-BINARY/BINARY-NAME.tar</pre></li>
<li>From the command line, confirm that the upload of the ClamAV software binary completed. You should see the ClamAV release.
<pre class="terminal">bosh releases</pre></li>
<li>If you're using Windows, do the following:
   <ol>
   <li>Follow the instructions in the <a href="https://github.com/pivotal-cf/clamav-lib-release/blob/master/README.md">ClamAV for PCF README</a> to create a clamav-lib release tarball.</li>
   <li>Copy the clamav-lib tarball to your Ops Manager VM using the following command:
   <pre class="terminal">scp -i PATH-TO-PRIVATE-KEY clamav-lib.tar.gz ubuntu@OPS-MANAGER-VM-IP:/DIRECTORY</pre></li>
   <li>Upload the clamav-lib release with the following command:
     <pre class="terminal">bosh upload release clamav-lib.tar.gz</pre></li>
    </ol></li>
<li><a name="update"></a>Update your runtime configuration to include ClamAV.
  <p class="note"><strong>Note</strong>: If you installed other BOSH add-ons, you must merge the ClamAV manifest into your existing add-on manifest. </p></li>
<li>Append the contents of <code>clamav.yml</code> to your existing add-on YML file.
<pre class="terminal">bosh update runtime-config PATH/YOUR-ADD-ON-YML.yml</pre>
When you run this command, the manifest displays.</li>
<li>Verify the runtime configuration changes match what you specified in the ClamAV manifest. These changes will look different on <a href="#linux">Linux</a> and <a href="#win">Windows</a> hosts.</li>
</ol>

<h3><a id="linux"></a>Configuration changes for Linux hosts</h3>
<ol>
<li>Enter the following command in your terminal.<br />   
<pre class="terminal">bosh runtime-config</pre></li>
<li>Download ClamAV Add-on software binary from the <a href="https://network.pivotal.io/products/p-clamav-addon">Pivotal Network</a> to your local machine.</li>
<li>Copy the software binary to your Ops Manager VM.<br/>
<pre class="terminal">scp -i PATH-TO-PRIVATE-KEY clamav-release.tar.gz ubuntu@YOUR-OPS-MANAGER-VM-IP:</pre></li>
<li>Copy the ClamAV manifest, <code>clamav.yml</code> file, to the Ops Manager VM.<br/>
<pre class="terminal">scp -i PATH-TO-PRIVATE-KEY clamav.yml ubuntu@YOUR-OPS-MANAGER-VM-IP:</pre></li>
<li>SSH into the Ops Manager VM.<br/>
<pre class="terminal">ssh -i PATH-TO-PRIVATE-KEY ubuntu@YOUR-OPS-MANAGER-VM-IP</pre></li>
<li>On the Ops Manager VM, navigate to the software binary location.<br/>
<pre class="terminal">cd PATH-TO-BINARY</pre></li>
<li>On the Ops Manager VM, target your BOSH director instance.<br/>
<pre class="terminal">
bosh target YOUR-OPS-MANAGER-DIRECTOR-IP
Target set to 'Ops Manager'
Your username: director
Enter password: ******************
Logged in as 'director'
</pre></li>
<li>Upload your release.<br/>
<pre class="terminal">bosh upload release PATH-TO-BINARY/BINARY-NAME.tar</pre></li>
<li>From the command line, confirm that the upload of the ClamAV
software binary completed. You should see the ClamAV release.<br/>
<pre class="terminal">bosh releases</pre></li>
<li>Verify your runtime configuration changes match what you specified in the ClamAV manifest.
<pre class="terminal">bosh runtime-config</pre>

    <pre class="terminal">
     Acting as user 'admin' on 'micro'
     releases:
     - name: clamav
         version: x.x.x
     addons:
         name: clamav
         jobs:
          - name: clamav
            release: clamav
         include:
           stemcell:
           - os: ubuntu-trusty
     ...</pre>
</li>
<li>Navigate to your Installation Dashboard in Ops Manager.</li>
<li>Click <strong>Apply Changes</strong>.</li>
</ol>

<h3><a id="win"></a>Configuration changes for Windows hosts</h3>
<ol>
<li>Follow the instructions in the <a href="https://github.com/pivotal-cf/clamav-lib-release/blob/master/README.md">ClamAV for PCF README</a> to create a clamav-lib release tarball.</li>
<li>Copy the clamav-lib tarball to your Ops Manager VM, with the following command:
<pre class="terminal">scp -i PATH-TO-PRIVATE-KEY clamav-lib.tar.gz ubuntu@OPS-MANAGER-VM-IP:/DIRECTORY</pre></li>
<li>Upload the clamav-lib release, with the following command:
<pre class="terminal">bosh upload release clamav-lib.tar.gz</pre></li>
<li><a name="update"></a>Update your Runtime Configuration to include the ClamAV Add-on.
<pre class="terminal">bosh update runtime-config PATH/clamav.yml</pre>
<p class="note"><strong>Note</strong>: If you have installed other BOSH add-ons, you must merge the ClamAV manifest <code>clamav.yml</code> into your existing Runtime Configuration manifest and use the merged manifest.</p></li>

<li>Verify your runtime configuration changes match what you specified in the ClamAV manifest.<br/>

<pre class="terminal">bosh runtime-config</pre>

    <pre class="terminal">bosh runtime-config

     Acting as user 'admin' on 'micro'
     releases:
     - name: clamav
         version: x.x.x
     - name: clamav-lib
         version: x.x.x
         version: y.y.y

     addons:
         name: clamav-windows
         jobs:
         - name: clamav-windows
           release: clamav
         - name: clamav-lib-windows
           release: clamav-lib
         include:
           stemcell:
           - os: windows2012R2
     ...</pre></li>

<li>Navigate to your Installation Dashboard in Ops Manager.</li>
<li>Click <strong>Apply Changes</strong>.</li>
</ol>

<h2><a id="alerts"></a> Configure Forwarding for ClamAV Alerts</h2>

The ClamAV BOSH release writes all alerts to the syslogs of the VMs in your deployment. You can use syslog forwarding to forward the alerts to a syslog aggregator.

* **Using the Elastic Runtime tile**: Follow the steps to [Configure System Logging](http://docs.pivotal.io/pivotalcf/customizing/cloudform-er-config.html#sys-logging) in the Elastic Runtime tile. 

The syslog aggregator that you specify receives all alerts generated on Elastic Runtime VMs, including the ClamAV alerts.

* **Using the BOSH syslog release**: You can use the syslog BOSH release to forward system logs. 
For instructions, see the [syslog-release](https://github.com/cloudfoundry/syslog-release).

<p class="note"><strong>Note</strong>: When you configure syslog forwarding, ensure there is enough disk space for the logs. Make sure that log rotation is frequent enough. If in doubt, rotate the logs hourly or when they reach a certain size. Pivotal recommends forwarding logs to a remote syslog aggregation system.</p>

<h2><a id="verify"></a>Verify Your ClamAV Add-on Installation</h2>
<ol>
<li><a href="https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#bosh-ssh">BOSH ssh</a> into one of the VMs in your deployment.</li>
<li>Run <code>monit summary</code>. Look for the following processes in the output:
<pre class="terminal">The Monit daemon 5.2.4 uptime: 3d 0h 56m
Process 'clamd'                     running<br/>
Process 'freshclam'                 running</pre></li>
<li>If <code>monit summary</code> does not list <code>clamd</code> and <code>freshclamd</code>, do the following:
  <ol>
  <li>Try to start the ClamAV processes by running the following commands:
  <pre class="terminal">
  monit start clamd<br>
  monit start freshclam</pre></li>
  <li>Run <code>monit summary</code> again. If you do not see the processes mentioned above, check <code>/var/vcap/sys/log/clamav</code> logs for errors.</li>
  </ol>
<li>If <code>monit summary</code> does list <code>freshclamd</code> and <code>clamd</code>, create a file on the VM with the following contents:
<pre class="terminal">
X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
</pre>
This is a virus signature used to test anti-virus software.</li>
<li>After <code>clamdscan</code> completes, a notification should appear in <code>/var/log/messages</code>.</li>
</ol>

<h3><a id="format"></a>ClamAV Log Format</h3>

ClamAV log format is unstructured. If a virus is detected, the following text is sent to syslog:

<pre class="terminal">
Jul 11 17:36:35 k2lam76scmb clamd[3022]: SelfCheck: Database status OK
Jul 11 17:42:34 k2lam76scmb clamd[3022]: /bin/infected-file: Eicar-Test-Signature FOUND
</pre>

A generalized format for the logline is:

<pre class="terminal">
clamd[PID]: INFECTED-FILE-PATH: VIRUS-NAME FOUND
</pre>

<h2><a id="setup-on-access"></a>Enable On-Access Scan</h2>
<p class="note"><strong>Note</strong>: On-Access Scan is not supported on Windows.</p>

ClamAV offers immediate file scanning upon file modification. This feature may reduce the time it takes to detect and report malware. 

Enable the feature with the <code>on_access</code> runtime config property:
<ol>
<li>In the <code>clamav.yml</code> file, add the <code>on_access</code> property under the <code>clamav</code> property, set <code>on_access</code> to <code>yes</code>, shown in bold: 
  <pre class="terminal">
  releases:
  <span>-</span> name: clamav
      version: x.x.x
  <br>
  addons:
    name: clamav
      jobs:
        <span>-</span> name: clamav
          release: clamav
      properties:
        clamav:
          <strong>on\_access: yes</strong>
          scheduled: yes
  ...
  </pre>
</li>
<li>Apply this configuration change by following the instructions [below](#update).</li>
</ol>

<h2><a id="setup-on-access"></a>Disable Scheduled Scan</h2>

By default, ClamAV runs a virus scan every hour. The scan frequency is not configurable, but you can disable the scan completely if necessary.

To disable the scheduled scan, do the following:
<ol>
<li>In the <code>runtime-config</code>, set the property <code>scheduled</code> to <code>no</code>.</li>
<li>Apply the changes.</li>
</ol>

<h2><a id="quarantine"></a>Choose the Action on Infected Files</h2>

You can configure ClamAV to take action when infected files are found. 
By default, a notification is sent to the syslog when an infected file is found. 
However, you can specify other actions, as described [below](#step2).
<ol>
<li>In the <code>clamav.yml</code> file, add the <code>action</code> property under the <code>clamav</code> property and, optionally, the <code>action_destination</code> property, shown in bold:
  <pre class="terminal">
  releases:
  - name: clamav
      version: x.x.x

  addons:
    name: clamav
      jobs:
        - name: clamav
          release: clamav
      properties:
        clamav:
          action: <strong>ACTION</strong>
          action_destination: <strong>PATH</strong>
  ...</pre>
  </li>

<li>Replace <code>ACTION</code> with one of the following values:<a id="step2"></a>
<ul>
<li><code>notify</code>: The default, only send a notification to syslog</li>
<li><code>remove</code>: Delete the infected file from the filesystem</li>
<li><code>move</code>: Move the infected file to the directory location specified by <code>action_destination</code></li>
<li><code>copy</code>: Copy the infected file to the directory location specified by <code>action_destination</code></li>
</ul>
If you don't supply an action, the function fails.</li>

<li>Replace <code>PATH</code> with the directory location where you want the infected files moved or copied to. The system does not scan the moved-to or copied-to location. If the directory path is not valid, the function fails.<br/>

Example configuration:

  <pre class="terminal">
  releases:
  -name: clamav
      version: x.x.x

  addons:
    name: clamav
      jobs:
        - name: clamav
          release: clamav
      properties:
        clamav:
          action: move
          action_destination: /var/vcap/data/clamav/found
  ...</pre>
</li>
</ol>
